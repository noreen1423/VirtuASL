import cv2
import mediapipe as mp
import sys
import serial
import time

# Initialize MediaPipe Hands.
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils

# Set up the serial connection to Arduino (update the port if necessary)
arduino_serial = serial.Serial('COM19', 115200, timeout=1)  # Update port as needed

cap = cv2.VideoCapture(0)

# Flag to indicate whether hand tracking is active
tracking_active = True

# Timestamp for the last received data from Arduino
last_arduino_data_time = time.time()

# Time interval (in seconds) to wait before turning tracking back on
tracking_reenable_interval = 5  # Adjust as needed

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    if tracking_active:
        # Convert the frame colors from BGR to RGB.
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = hands.process(frame_rgb)

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Assuming you want to track the index finger tip.
                index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
                # Output the coordinates.
                #sys.stdout.write(f'{index_tip.x},{index_tip.y},{index_tip.z}\n')
                #sys.stdout.flush()

        # For debugging, show the frame with drawn landmarks.
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    cv2.imshow("Frame", frame)

    # Read and process data from Arduino
    if arduino_serial.inWaiting() > 0:
        tracking_active = False  # Turn off tracking when Arduino sends something
        last_arduino_data_time = time.time()
        arduino_data = arduino_serial.readline().decode('utf-8').rstrip()
        print(arduino_data)

    # Check if it's time to re-enable tracking
    if not tracking_active and time.time() - last_arduino_data_time > tracking_reenable_interval:
        tracking_active = True

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

arduino_serial.close()  # Close the serial connection to Arduino
cap.release()
cv2.destroyAllWindows()
